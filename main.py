# import base64

# def xml_to_base64(xml_file):
#     with open(xml_file, "rb") as file:
#         xml_bytes = file.read()
#         base64_encoded = base64.b64encode(xml_bytes).decode('utf-8')
#         return base64_encoded

# # Substitua 'arquivo.xml' pelo caminho do seu arquivo XML
# caminho_xml = 'D:/Downloads/pastaxml'
# base64_data = xml_to_base64(caminho_xml)
# print(base64_data)


import base64
import xml.etree.ElementTree as ET

# String Base64
base64_string = ""


# Decodificando a string Base64 para obter o XML
decoded_xml = base64.b64decode(base64_string)

# Salvando o XML decodificado em um arquivo
with open("nfe.xml", "wb") as f:
    f.write(decoded_xml)

print("Arquivo XML salvo com sucesso!")